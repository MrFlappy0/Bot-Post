import asyncio
import os
import json
import praw
import dropbox
import logging
import requests
import gzip
from threading import Thread
from concurrent.futures import ThreadPoolExecutor
from telegram import Bot
from telegram.error import NetworkError, TelegramError
from datetime import datetime, timedelta
from tenacity import retry, stop_after_attempt, wait_fixed
import time
from telegram.ext import Application, CommandHandler, MessageHandler, filters

TEMP_DIR = "temp_files"
os.makedirs(TEMP_DIR, exist_ok=True)

# Chargement des variables d'environnement (Railway)
REDDIT_CLIENT_ID = os.getenv("REDDIT_CLIENT_ID")
REDDIT_SECRET = os.getenv("REDDIT_SECRET")
REDDIT_USER_AGENT = os.getenv("REDDIT_USER_AGENT", "RedditTelegramBot")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DROPBOX_ACCESS_TOKEN = os.getenv("DROPBOX_ACCESS_TOKEN")
DROPBOX_FILE_PATH_POSTS = "/sent_posts.txt"
DROPBOX_FILE_PATH_SUBSCRIBERS = "/subscribers.json"
DROPBOX_FILE_PATH_SUBREDDITS = "/subreddits.json"
DROPBOX_FILE_PATH_STATS = "/stats.json"
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # ID Telegram de l'administrateur

# Initialiser Reddit avec PRAW
reddit = praw.Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_SECRET,
    user_agent=REDDIT_USER_AGENT
)

# Initialiser Telegram
bot = Bot(token=TELEGRAM_TOKEN)

# Initialiser Dropbox
dropbox_client = dropbox.Dropbox(DROPBOX_ACCESS_TOKEN)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# Variables globales
sent_posts = set()
subscribers = {}
subreddits = []
stats = {"images": 0, "videos": 0, "gifs": 0, "total": 0, "subreddits": {}, "temporal": {}, "failed": 0}
failed_queue = []  # File d'attente pour les envois √©chou√©s
TEMP_DIR = "temp_files"  # R√©pertoire temporaire pour stocker les fichiers t√©l√©charg√©s
os.makedirs(TEMP_DIR, exist_ok=True)  # Assurez-vous que le r√©pertoire existe


def initialize_subreddits_in_dropbox():
    """
    Initialise les subreddits suivis par d√©faut dans Dropbox si le fichier n'existe pas ou est vide.
    """
    default_subreddits = [
        "Nudes", "FantasticBreasts", "GoneWild", "cumsluts", "PetiteGoneWild", "RealGirls",
        "nsfw", "Amateur", "pregnantporn", "NSFW_GIF", "scrubsgonewild", "GoneWildPlus",
        "NaughtyWives", "snapleaks", "pregnantonlyfans", "Nude_Selfie", "Puffies"
    ]

    try:
        # Tente de charger le fichier depuis Dropbox
        _, res = dropbox_client.files_download(DROPBOX_FILE_PATH_SUBREDDITS)
        current_subreddits = json.loads(res.content.decode("utf-8"))

        if not current_subreddits:  # Si le fichier est vide
            raise ValueError("Le fichier des subreddits est vide.")

        logging.info("Les subreddits suivis ont √©t√© charg√©s depuis Dropbox.")
        return current_subreddits

    except (dropbox.exceptions.ApiError, ValueError, json.JSONDecodeError):
        # Si le fichier n'existe pas ou est vide, on initialise avec les subreddits par d√©faut
        logging.warning("Aucun fichier de subreddits trouv√© ou fichier vide. Initialisation par d√©faut.")
        save_file_to_dropbox(DROPBOX_FILE_PATH_SUBREDDITS, default_subreddits)
        return default_subreddits
    
# Chargement et sauvegarde des donn√©es
def load_file_from_dropbox(file_path, default_data):
    try:
        _, res = dropbox_client.files_download(file_path)
        data = json.loads(res.content.decode("utf-8"))
        logging.info(f"Fichier {file_path} charg√© depuis Dropbox.")
        return data
    except dropbox.exceptions.ApiError:
        logging.warning(f"Fichier {file_path} introuvable, cr√©ation d'un nouveau.")
        return default_data
def load_data():
    global sent_posts, subscribers, subreddits, stats

    # Chargement des posts d√©j√† envoy√©s
    sent_posts = set(load_file_from_dropbox(DROPBOX_FILE_PATH_POSTS, []))

    # Chargement des abonn√©s
    subscribers = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, {})

    # Initialisation ou chargement des subreddits
    subreddits = initialize_subreddits_in_dropbox()

    # Chargement des statistiques
    stats = load_file_from_dropbox(DROPBOX_FILE_PATH_STATS, stats)


@retry(stop=stop_after_attempt(3), wait=wait_fixed(5))
def save_file_to_dropbox(file_path, data):
    try:
        content = json.dumps(data, indent=4)
        dropbox_client.files_upload(
            content.encode("utf-8"),
            file_path,
            mode=dropbox.files.WriteMode("overwrite")
        )
        logging.info(f"Fichier {file_path} sauvegard√© sur Dropbox.")
    except Exception as e:
        logging.error(f"Erreur lors de la sauvegarde de {file_path} sur Dropbox : {e}")
        raise e


def load_data():
    global sent_posts, subscribers, subreddits, stats
    sent_posts = set(load_file_from_dropbox(DROPBOX_FILE_PATH_POSTS, []))
    subscribers = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, {})
    subreddits = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBREDDITS, ["example_subreddit"])
    stats = load_file_from_dropbox(DROPBOX_FILE_PATH_STATS, stats)


def save_data():
    save_file_to_dropbox(DROPBOX_FILE_PATH_POSTS, list(sent_posts))
    save_file_to_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, subscribers)
    save_file_to_dropbox(DROPBOX_FILE_PATH_SUBREDDITS, subreddits)
    save_file_to_dropbox(DROPBOX_FILE_PATH_STATS, stats)


def escape_markdown(text):
    """√âchappe les caract√®res sp√©ciaux Markdown."""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)

def fetch_and_send_new_posts():
    """
    R√©cup√®re les nouveaux posts des subreddits configur√©s, traite les m√©dias et les envoie aux abonn√©s.
    Journalise chaque √©tape du processus.
    """
    for subreddit_name in subreddits:
        try:
            logging.info(f"üîç D√©but de la r√©cup√©ration des posts pour le subreddit : {subreddit_name}")
            subreddit = reddit.subreddit(subreddit_name)

            # R√©cup√©ration des derniers posts
            posts = list(subreddit.new(limit=100))
            logging.info(f"‚úÖ {len(posts)} posts r√©cup√©r√©s depuis le subreddit {subreddit_name}.")

            # T√©l√©chargement des m√©dias
            valid_posts = {
                submission.id: "".join(
                    c if c.isalnum() or c in (" ", "-", "_") else "_" for c in submission.title
                ) + "." + submission.url.split(".")[-1]
                for submission in posts if submission.id not in sent_posts and is_media_post(submission)
            }
            logging.info(f"üéûÔ∏è {len(valid_posts)} posts contenant des m√©dias valides identifi√©s.")

            downloads = download_media_parallel(valid_posts)
            logging.info(f"üì• T√©l√©chargement des m√©dias termin√© pour le subreddit {subreddit_name}.")

            # Traitement des t√©l√©chargements
            for submission in posts:
                if submission.id in downloads and downloads[submission.id]:
                    filepath = downloads[submission.id]
                    if os.path.getsize(filepath) > 50 * 1024 * 1024:  # Compression si n√©cessaire
                        filepath = compress_file(filepath)

                    media_type = "image" if filepath.endswith(('.jpg', '.jpeg', '.png', '.gif')) else "video"
                    for chat_id in subscribers.keys():
                        send_media_to_telegram(chat_id, filepath, media_type)

                    # Mise √† jour des statistiques
                    update_temporal_stats(submission, media_type)

                    # Suppression du fichier temporaire
                    delete_file(filepath)

                    # Marquer le post comme envoy√©
                    sent_posts.add(submission.id)
                    logging.info(f"‚úÖ Post {submission.id} envoy√© avec succ√®s et marqu√© comme trait√©.")

            # Sauvegarde des donn√©es apr√®s le traitement
            save_data()
            logging.info(f"üìù Donn√©es sauvegard√©es apr√®s le traitement des posts du subreddit {subreddit_name}.")

        except Exception as e:
            logging.error(f"‚ùå Erreur lors de la r√©cup√©ration ou du traitement des posts pour {subreddit_name} : {e}")


def is_media_post(submission):
    """
    V√©rifie si le post contient un m√©dia support√© (image, vid√©o, GIF) et journalise les r√©sultats.
    """
    try:
        valid_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.mp4', '.webm')
        is_valid = (
            submission.url.endswith(valid_extensions) or
            submission.url.startswith("https://v.redd.it") or
            submission.is_gallery
        )
        if is_valid:
            logging.info(f"üì∏ Post {submission.id} contient un m√©dia support√© : {submission.url}")
        else:
            logging.debug(f"üö´ Post {submission.id} ne contient pas de m√©dia valide : {submission.url}")
        return is_valid
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la v√©rification du m√©dia pour le post {submission.id} : {e}")
        return False


def download_media_parallel(posts):
    """
    T√©l√©charge les m√©dias de plusieurs posts en parall√®le et journalise le progr√®s.
    """
    results = {}
    logging.info(f"üì• D√©but du t√©l√©chargement parall√®le pour {len(posts)} m√©dias.")

    def download(url, filename):
        try:
            filepath = os.path.join(TEMP_DIR, filename)
            response = requests.get(url, stream=True)
            response.raise_for_status()
            with open(filepath, "wb") as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)
            results[url] = filepath
            logging.info(f"‚úÖ T√©l√©chargement r√©ussi : {url} -> {filepath}")
        except Exception as e:
            logging.error(f"‚ùå Erreur lors du t√©l√©chargement du m√©dia {url} : {e}")
            results[url] = None

    with ThreadPoolExecutor(max_workers=10) as executor:
        for post_id, filename in posts.items():
            executor.submit(download, reddit.submission(post_id).url, filename)

    logging.info(f"üì¶ T√©l√©chargement parall√®le termin√©.")
    return results


def update_temporal_stats(submission, media_type):
    """
    Met √† jour les statistiques temporelles pour un post et journalise l'op√©ration.
    """
    try:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        stats.setdefault("temporal", {}).setdefault(submission.subreddit.display_name, []).append({
            "time": now,
            "type": media_type,
            "title": submission.title
        })
        save_file_to_dropbox(DROPBOX_FILE_PATH_STATS, stats)
        logging.info(f"üìä Statistiques mises √† jour pour le post {submission.id}.")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la mise √† jour des statistiques pour le post {submission.id} : {e}")


def retry_failed_queue():
    for task in failed_queue[:]:
        try:
            send_media_to_telegram(task['chat_id'], task['filepath'], task['media_type'])
            failed_queue.remove(task)
        except Exception as e:
            logging.error(f"Erreur lors de la tentative de r√©envoi pour {task['filepath']} : {e}")


def clean_temp_directory():
    now = time.time()
    for filename in os.listdir(TEMP_DIR):
        filepath = os.path.join(TEMP_DIR, filename)
        try:
            if os.path.isfile(filepath) and (now - os.path.getmtime(filepath)) > 24 * 3600:  # Plus vieux que 24h
                os.remove(filepath)
                logging.info(f"Fichier temporaire supprim√© : {filepath}")
        except Exception as e:
            logging.error(f"Erreur lors de la suppression du fichier temporaire {filepath} : {e}")


def schedule_daily_report():
    """
    Planifie un rapport quotidien envoy√© √† l'administrateur.
    """
    while True:
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=8, minute=0, second=0, microsecond=0)
        time_to_wait = (next_run - now).total_seconds()
        time.sleep(time_to_wait)
        daily_report()
def notify_admin(message):
    """
    Envoie une notification √† l'administrateur Telegram et journalise les r√©sultats.
    """
    logging.info(f"Tentative d'envoi de la notification √† l'administrateur : {message}")
    try:
        bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        logging.info("Notification envoy√©e avec succ√®s √† l'administrateur.")
    except Exception as e:
        logging.error(f"Erreur lors de l'envoi de la notification √† l'administrateur : {e}")


def compress_file(filepath):
    """
    Compresse un fichier volumineux au format Gzip et journalise les r√©sultats.
    """
    compressed_filepath = filepath + ".gz"
    try:
        logging.info(f"Compression du fichier : {filepath}")
        with open(filepath, "rb") as f_in, gzip.open(compressed_filepath, "wb") as f_out:
            f_out.writelines(f_in)
        logging.info(f"Fichier compress√© avec succ√®s : {compressed_filepath}")
        return compressed_filepath
    except Exception as e:
        logging.error(f"Erreur lors de la compression du fichier {filepath} : {e}")
        return filepath


def send_media_to_telegram(chat_id, filepath, media_type):
    """
    Envoie une image ou une vid√©o √† un utilisateur Telegram et journalise les r√©sultats.
    """
    try:
        logging.info(f"Tentative d'envoi du m√©dia {filepath} ({media_type}) au chat {chat_id}")
        if media_type == "image":
            with open(filepath, "rb") as file:
                bot.send_photo(chat_id=chat_id, photo=file)
        elif media_type == "video":
            with open(filepath, "rb") as file:
                bot.send_video(chat_id=chat_id, video=file)
        logging.info(f"M√©dia envoy√© avec succ√®s au chat {chat_id} : {filepath}")
    except Exception as e:
        logging.error(f"Erreur lors de l'envoi du m√©dia {filepath} √† {chat_id} : {e}")
        failed_queue.append({"chat_id": chat_id, "filepath": filepath, "media_type": media_type})
        stats["failed"] = len(failed_queue)


def delete_file(filepath):
    """
    Supprime un fichier du syst√®me et journalise les r√©sultats.
    """
    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            logging.info(f"Fichier supprim√© avec succ√®s : {filepath}")
        else:
            logging.warning(f"Fichier introuvable pour suppression : {filepath}")
    except Exception as e:
        logging.error(f"Erreur lors de la suppression du fichier {filepath} : {e}")


def daily_report():
    """
    G√©n√®re un rapport quotidien des statistiques et l'envoie √† l'administrateur, avec journalisation d√©taill√©e.
    """
    logging.info("G√©n√©ration du rapport quotidien.")
    today = datetime.now().strftime("%Y-%m-%d")
    report_message = f"üìä Rapport quotidien ({today}):\n"
    report_message += f"Total m√©dias envoy√©s : {stats['total']}\n"
    report_message += f"Images : {stats['images']}\n"
    report_message += f"Vid√©os : {stats['videos']}\n"
    report_message += f"GIFs : {stats['gifs']}\n"
    report_message += f"Envois √©chou√©s : {stats['failed']}\n"

    for subreddit, count in stats.get("subreddits", {}).items():
        report_message += f"r/{subreddit} : {count} posts envoy√©s\n"

    try:
        notify_admin(report_message)
        logging.info("Rapport quotidien envoy√© avec succ√®s √† l'administrateur.")
    except Exception as e:
        logging.error(f"Erreur lors de l'envoi du rapport quotidien : {e}")


def reload_data():
    """
    Recharge les donn√©es depuis Dropbox et journalise les r√©sultats.
    """
    global subscribers, subreddits
    logging.info("Tentative de rechargement des donn√©es depuis Dropbox.")
    try:
        subscribers = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, {})
        subreddits = initialize_subreddits_in_dropbox()
        logging.info("Donn√©es recharg√©es avec succ√®s depuis Dropbox.")
    except Exception as e:
        logging.error(f"Erreur lors du rechargement des donn√©es depuis Dropbox : {e}")


def split_message(message, max_length=4096):
    """
    Divise un message long en plusieurs parties pour Telegram, avec journalisation.
    """
    logging.info("Division d'un message long pour l'envoi √† Telegram.")
    parts = [message[i:i + max_length] for i in range(0, len(message), max_length)]
    logging.debug(f"Message divis√© en {len(parts)} parties.")
    return parts

async def send_long_message(chat_id, message, context):
    for part in split_message(message):
        await context.bot.send_message(chat_id=chat_id, text=part, parse_mode="Markdown")


async def main_tasks():
    while True:
        try:
            # Recharger les abonn√©s et subreddits toutes les 5 minutes
            if time.time() - last_reload > 300:
                logging.info("‚ôªÔ∏è Rechargement des abonn√©s et subreddits depuis Dropbox...")
                subscribers = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, {})
                subreddits = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBREDDITS, [])
                last_reload = time.time()

            # R√©cup√©rer et envoyer les nouveaux posts
            fetch_and_send_new_posts()

            # R√©essayer les envois √©chou√©s
            if failed_queue:
                logging.info(f"üîÅ Tentative de r√©envoi pour {len(failed_queue)} fichiers √©chou√©s.")
                retry_failed_queue()

            # Nettoyer les fichiers temporaires
            clean_temp_directory()

            # Sauvegarder les donn√©es r√©guli√®rement
            save_data()

        except Exception as e:
            logging.error(f"‚ö†Ô∏è Erreur critique dans les t√¢ches principales : {e}")
            notify_admin(f"‚ö†Ô∏è Erreur critique dans les t√¢ches principales : {e}")
        await asyncio.sleep(60)

async def start(update, context):
    """Commande /start pour afficher un message d'accueil et enregistrer l'utilisateur."""
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "Utilisateur inconnu"

    # Ajouter l'utilisateur aux abonn√©s si n√©cessaire
    if chat_id not in subscribers:
        subscribers[chat_id] = {"username": username, "joined": datetime.now().isoformat()}
        save_data()  # Sauvegarder imm√©diatement apr√®s l'ajout
        logging.info(f"Nouvel abonn√© ajout√© : {username} (ID : {chat_id})")

    message = (
        "üëã **Bienvenue sur le Reddit Media Bot !**\n\n"
        "üìå **Fonctionnalit√©s principales :**\n"
        "- üîç Surveille des subreddits pour r√©cup√©rer des images, vid√©os ou GIFs.\n"
        "- üì§ Envoie les m√©dias directement dans cette conversation Telegram.\n"
        "- üìä G√©n√®re des rapports quotidiens sur l'activit√© du bot.\n\n"
        "üìÇ **Subreddits Suivis Actuellement :**\n"
        f"{', '.join(subreddits)}\n\n"
        "‚öôÔ∏è **Commandes disponibles :**\n"
        "‚û°Ô∏è `/help` - Affiche ce message d'aide.\n"
        "‚û°Ô∏è `/stats` - Affiche les statistiques actuelles.\n"
        "‚û°Ô∏è `/reload` - Recharge les donn√©es (abonn√©s, subreddits).\n"
        "\nüí° *Si vous avez des questions, contactez l'administrateur.*"
    )
    escaped_message = escape_markdown(message)
    await context.bot.send_message(chat_id=chat_id, text=escaped_message, parse_mode="Markdown")
async def help_command(update, context):
    """Commande /help pour afficher un message d'aide d√©taill√©."""
    message = (
        "‚ùì **Aide et Informations sur le Bot**\n\n"
        "üîß **Commandes disponibles :**\n"
        "1. `/start` - Affiche le message de bienvenue.\n"
        "2. `/help` - Affiche ce message d'aide.\n"
        "3. `/stats` - Montre les statistiques des m√©dias envoy√©s.\n"
        "4. `/reload` - Recharge les donn√©es des abonn√©s et des subreddits.\n\n"
        "üìã **Explications :**\n"
        "- Le bot surveille automatiquement les subreddits configur√©s pour r√©cup√©rer des images, vid√©os et GIFs.\n"
        "- Ces m√©dias sont envoy√©s ici d√®s qu'ils sont disponibles.\n\n"
        "üí¨ *Pour toute question, contactez l'administrateur.*"
    )
    escaped_message = escape_markdown(message)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=escaped_message, parse_mode="Markdown")
async def clean_temp_command(update, context):
    """
    Commande pour nettoyer manuellement le r√©pertoire temporaire.
    """
    clean_temp_directory()  # Appel de la fonction synchrone pour nettoyer
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üßπ R√©pertoire temporaire nettoy√©.")
    logging.info("Commande de nettoyage du r√©pertoire temporaire ex√©cut√©e.")

async def reload_command(update, context):
    """
    Recharge les abonn√©s et les subreddits depuis Dropbox.
    """
    reload_data()
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üîÑ Donn√©es recharg√©es avec succ√®s.")
    logging.info("Les donn√©es ont √©t√© recharg√©es.")
async def stats_command(update, context):
    """
    Affiche les statistiques actuelles des m√©dias envoy√©s.
    """
    stats_message = (
        "üìä **Statistiques Actuelles**\n\n"
        f"üì∏ Images envoy√©es : {stats['images']}\n"
        f"üé• Vid√©os envoy√©es : {stats['videos']}\n"
        f"üéûÔ∏è GIFs envoy√©s : {stats['gifs']}\n"
        f"üì¨ Total de m√©dias envoy√©s : {stats['total']}\n\n"
        "üõ†Ô∏è *Subreddits actuellement suivis :*\n"
        f"{', '.join(subreddits)}"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=stats_message, parse_mode="Markdown")

async def echo(update, context):
    await update.message.reply_text(f"Commande re√ßue : {update.message.text}")
async def fallback(update, context):
    await update.message.reply_text("Commande inconnue ou non prise en charge.")
async def error_handler(update, context):
    logging.error(f"Une erreur s'est produite : {context.error}")
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚ö†Ô∏è Une erreur s'est produite : {context.error}")



if __name__ == "__main__":
    try:
        # Charger les donn√©es initiales
        logging.info("üîÑ Chargement des donn√©es initiales...")
        load_data()

        # Cr√©er l'application Telegram
        logging.info("üöÄ Initialisation du bot Telegram...")
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # Ajouter les commandes utilisateur et administrateur
        logging.info("‚öôÔ∏è Ajout des commandes Telegram...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test", echo))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("reload", reload_command))
        application.add_handler(CommandHandler("clean_temp", clean_temp_command))
        application.add_error_handler(error_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))

        # D√©marrer le rapport quotidien dans un thread s√©par√©
        logging.info("üóìÔ∏è D√©marrage de la planification du rapport quotidien.")
        Thread(target=schedule_daily_report, daemon=True).start()

        # Variables pour gestion dynamique
        last_reload = time.time()

        # D√©marrer l'√©coute des commandes Telegram
        logging.info("üí¨ D√©marrage de l'√©coute des commandes Telegram via polling...")
        application.run_polling()

        # Boucle principale pour la r√©cup√©ration des posts et autres t√¢ches
        while True:
            try:
                # Recharger les abonn√©s et subreddits toutes les 5 minutes
                if time.time() - last_reload > 300:  # 300 secondes = 5 minutes
                    logging.info("‚ôªÔ∏è Rechargement des abonn√©s et subreddits depuis Dropbox...")
                    subscribers = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBSCRIBERS, {})
                    subreddits = load_file_from_dropbox(DROPBOX_FILE_PATH_SUBREDDITS, [])
                    last_reload = time.time()

                # R√©cup√©rer et envoyer les nouveaux posts
                fetch_and_send_new_posts()

                # R√©essayer les envois √©chou√©s
                if failed_queue:
                    logging.info(f"üîÅ Tentative de r√©envoi pour {len(failed_queue)} fichiers √©chou√©s.")
                    retry_failed_queue()

                # Nettoyer les fichiers temporaires
                clean_temp_directory()

                # Sauvegarder les donn√©es r√©guli√®rement
                save_data()

            except KeyboardInterrupt:
                # Interruption manuelle par l'utilisateur
                logging.warning("üõë Interruption par l'utilisateur. Arr√™t du bot en cours...")
                notify_admin("‚ùå Le bot a √©t√© arr√™t√© manuellement par l'administrateur.")
                break

            except Exception as e:
                # Gestion des erreurs critiques
                logging.error(f"‚ö†Ô∏è Erreur critique dans la boucle principale : {e}")
                notify_admin(f"‚ö†Ô∏è Le bot a rencontr√© une erreur critique : {e}")

            # Pause entre les it√©rations pour limiter la charge
            time.sleep(15)

    except Exception as e:
        # Gestion des erreurs critiques hors boucle
        logging.critical(f"üö® Le bot n'a pas pu d√©marrer correctement : {e}")
        notify_admin(f"üö® Erreur critique au d√©marrage : {e}")